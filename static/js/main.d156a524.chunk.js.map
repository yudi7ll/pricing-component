{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["PricingComponent","title","price","features","Features","map","feature","key","className","type","onClick","document","location","reload","dataMonthly","dataAnnually","i","App","useState","typeMonthly","setTypeMonthly","Pricing","defaultChecked","onChange","e","target","checked","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","checkValidServiceWorker"],"mappings":"iNAIA,SAASA,EAAT,GAA4D,IAAhCC,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,MAAwB,IAAjBC,gBAAiB,MAAN,GAAM,EACnDC,EAAW,kBAAMD,EAASE,KAAI,SAAAC,GAAO,OACzC,wBAAIC,IAAKD,GAAWA,OAGtB,OACE,yBAAKE,UAAU,WACb,yBAAKA,UAAU,+BACb,4BAAMP,GACN,wBAAIO,UAAU,kBAAd,IACG,8BAAQN,IAEX,wBAAIM,UAAU,mBACZ,kBAACJ,EAAD,OAEF,yBAAKI,UAAU,gBACb,4BAAQC,KAAK,SAASC,QAAU,kBAAMC,SAASC,SAASC,WAAxD,iBAOV,IAAMC,EAAc,CAClB,CACEb,MAAO,QACPC,MAAO,QACPC,SAAU,CACR,iBACA,kBACA,oBAED,CACDF,MAAO,eACPC,MAAO,QACPC,SAAU,CACR,eACA,kBACA,qBAED,CACDF,MAAO,SACPC,MAAO,QACPC,SAAU,CACR,eACA,mBACA,sBAMAY,EAAe,CAAC,SAAU,SAAU,UACvCV,KAAI,SAACH,EAAOc,GAAR,sBAAmBF,EAAYE,GAA/B,CAAmCd,aAwC3Be,MArCf,WAAe,MAEyBC,oBAAS,GAFlC,mBAENC,EAFM,KAEOC,EAFP,KAOPC,EAAU,kBAAOF,EAAcL,EAAcC,GAAcV,KAAI,gBAAGJ,EAAH,EAAGA,MAAOC,EAAV,EAAUA,MAAOC,EAAjB,EAAiBA,SAAjB,OACnE,kBAACH,EAAD,CACEO,IAAKN,EACLA,MAAOA,EACPC,MAAOA,EACPC,SAAUA,QAId,OACE,oCACE,2CACA,yBAAKK,UAAU,UACb,wBAAIA,UAAU,gBAAd,YACA,2BAAOA,UAAU,eACf,2BAAOC,KAAK,WACVa,gBAAc,EACdC,SApBgB,SAAAC,GAAC,OAAIJ,EAAeI,EAAEC,OAAOC,YAsB/C,0BAAMlB,UAAU,oBAElB,wBAAIA,UAAU,gBAAd,YAEF,yBAAKA,UAAU,gBACb,kBAACa,EAAD,SC/EFM,EAAcC,QACW,cAA7BC,OAAOjB,SAASkB,UAEe,UAA7BD,OAAOjB,SAASkB,UAEhBD,OAAOjB,SAASkB,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,MC3FjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3C,SAAS4C,eAAe,SDanB,SAAkBrB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIqB,IAAIC,qBAAwB5B,OAAOjB,SAAS8C,MACpDC,SAAW9B,OAAOjB,SAAS+C,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM3B,EAAK,UAAMwB,qBAAN,sBAEP9B,IAgEV,SAAiCM,EAAOC,GAEtC2B,MAAM5B,EAAO,CACX6B,QAAS,CAAE,iBAAkB,YAE5BxB,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5ChC,UAAUC,cAAcgC,MAAM9B,MAAK,SAAAC,GACjCA,EAAa8B,aAAa/B,MAAK,WAC7BT,OAAOjB,SAASC,eAKpBmB,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFAuB,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAcgC,MAAM9B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCnC/BE,I","file":"static/js/main.d156a524.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\n// pricing card template\nfunction PricingComponent({ title, price, features = [] }) {\n  const Features = () => features.map(feature => (\n    <li key={feature}>{ feature }</li>\n  ));\n  \n  return (\n    <div className=\"pricing\">\n      <div className=\"pricing__box pricing__basic\">\n        <h3>{ title }</h3>\n        <h2 className=\"pricing__price\">\n          $<span>{ price }</span>\n        </h2>\n        <ul className=\"pricing__offers\">\n          <Features />\n        </ul>\n        <div className=\"pricing__btn\">\n          <button type=\"button\" onClick={ () => document.location.reload() }>LEARN MORE</button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst dataMonthly = [\n  {\n    title: 'Basic',\n    price: '19.99',\n    features: [\n      '500 GB Storage',\n      '2 Users Allowed',\n      'Send up to 3 GB'\n    ]\n  }, {\n    title: 'Professional',\n    price: '24.99',\n    features: [\n      '1 TB Storage',\n      '5 Users Allowed',\n      'Send up to 10 GB'\n    ]\n  }, {\n    title: 'Master',\n    price: '39.99',\n    features: [\n      '2 TB Storage',\n      '10 Users Allowed',\n      'Send up to 20 GB'\n    ]\n  }\n];\n\n// change price value of pricingMonthly\nconst dataAnnually = ['199.99', '249.99', '399.99']\n  .map((price, i) => ({...dataMonthly[i], price}));\n\n// main app\nfunction App() {\n  // state\n  const [typeMonthly, setTypeMonthly] = useState(true);\n  // toggle state\n  const toggleTypeMonthly = e => setTypeMonthly(e.target.checked);\n\n  // renderable pricing\n  const Pricing = () => (typeMonthly ? dataMonthly : dataAnnually).map(({ title, price, features }) => (\n    <PricingComponent\n      key={title}\n      title={title}\n      price={price}\n      features={features}\n    />\n  ));\n\n  return (\n    <>\n      <h1>Our Pricing</h1>\n      <div className=\"switch\">\n        <h4 className=\"switch__text\">Annually</h4>\n        <label className=\"switch__box\">\n          <input type=\"checkbox\"\n            defaultChecked\n            onChange={toggleTypeMonthly}\n          />\n          <span className=\"switch__slider\"></span>\n        </label>\n        <h4 className=\"switch__text\">Monthly</h4>\n      </div>\n      <div className=\"pricing-card\">\n        <Pricing />\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}